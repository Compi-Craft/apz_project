services:
  auth_service_1:
    build:
      context: .
      dockerfile: auth_service/Dockerfile
    networks: 
      - smartnotes-network
    ports:
      - "5001:5001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    container_name: auth_service_1
    environment:
      - SERVICE_NAME=auth_service_1
      - PORT=5001

  db:
    image: postgres:15
    networks:
      - smartnotes-network
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authdb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "auth_db", "-h", "localhost", "-p", "5432"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6380:6379"
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    networks:
      - smartnotes-network

  consul:
    image: consul:1.15.4
    container_name: consul
    ports:
      - "8500:8500"
    networks:
      - smartnotes-network
    command: "agent -dev -client=0.0.0.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
  
  consul_loader:
    build:
      context: .
      dockerfile: consul_loader/Dockerfile
    depends_on:
      consul:
        condition: service_healthy
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - CONFIG_FILE=/app/config.json
    networks:
      - smartnotes-network

  mongo:
    image: mongo:6
    container_name: notes_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    depends_on:
      consul: 
        condition: service_healthy
    networks: 
      - smartnotes-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/27017"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  notes_service:
    build:
      context: .
      dockerfile: notes_service/Dockerfile
    networks: 
      - smartnotes-network
    ports:
      - "5011:5011"
    depends_on:
      mongo:
        condition: service_healthy
    container_name: notes_service_1
    environment:
      - SERVICE_NAME=notes_service_1
      - PORT=5011

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # основний порт AMQP
      - "15672:15672"   # веб-інтерфейс RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - smartnotes-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  note_consumer:
    build: 
      context: .
      dockerfile: consumer/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks: 
      - smartnotes-network
    scale: 3

  api_gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    networks: 
      - smartnotes-network
    ports:
      - "5000:5000"
    depends_on:
      consul:
        condition: service_healthy
    container_name: api_gateway
    environment:
      - SERVICE_NAME=api_gateway
      - PORT=5000

volumes:
  pgdata:
  mongo_data:
  rabbitmq_data:

networks:
  smartnotes-network:
    driver: bridge
